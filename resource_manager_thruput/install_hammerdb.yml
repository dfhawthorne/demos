---
- name:                 "Set Up HammerDB Server"
  hosts:                hammer.yaocm.id.au
  tasks:

  - name:               "Set global variables"
    set_fact:
      client_installer_loc:
                        "/opt/share/Software/database/linuxamd64_12102/client"
      hammerdb_home:    "/home/hammer"
      hammerdb_loc:     "/usr/local/HammerDB-4.0"
      install_group:    "oinstall"
      inventory_location:
                        "/opt/app/oraInventory"
      oracle_base:      "/opt/app/oracle"
      oracle_home:      "/opt/app/oracle/product/12.1.0.2/client"


  # ------------------- Install extra packages
  #                     (see https://hammerdb.com/docs/ch01s02.html)

  - name:               "Verify OS Distribution"
    fail:
      msg:              "Incorrect OS Distribution"
    when:               ansible_distribution != "OracleLinux" or ansible_distribution_major_version <= '7'

  - name:               "Remove Old Packages"
    yum:
      name:
      - pexpect
      state:            absent
    become:             yes
    become_user:        root

  - name:               "Install Extra Packages"
    yum:
      name:
      - nscd
      - git
      - libXft
      - libnsl
      - tcl
      state:            present
    become:             yes
    become_user:        root

  - name:               "Install PEXPECT using PIP"
    pip:
      name:             pexpect
      state:            present
    become:             yes
    become_user:        root

  # ------------------- Create Groups and Users

  - name:               "Create Groups"
    group:
      name:             "{{ item }}"
      state:            present
    become:             yes
    become_user:        root
    with_items:
    - "{{ install_group }}"
    - hammer

  - name:               "Create Users"
    user:
      create_home:      yes
      group:            "{{ item.group }}"
      home:             "{{ item.home }}"
      name:             "{{ item.name }}"
      shell:            /sbin/nologin
      state:            present
    with_items:
      - { name: oracle, group: "{{ install_group }}", home: "/home/oracle" }
      - { name: hammer, group: hammer, home: "{{ hammerdb_home }}" }
    become:             yes
    become_user:        root

  # ------------------- Download Linux installer
  #                     (see https://hammerdb.com/docs/ch01s03.html)

  - name:               "Download Linux Installer for HammerDB"
    get_url:
      url:              "https://github.com/TPC-Council/HammerDB/releases/download/v4.0/HammerDB-4.0-Linux-x64-installer.run"
      dest:             "{{ hammerdb_home }}"
      checksum:         sha1:59f449769a9ef10961e8406d43cb0109f9bf75e6
      mode:             "a+rx"
    become:             yes
    become_user:        hammer

  # -------------------- Install HammerDB
  #                      (see https://www.hammerdb.com/docs/ch01s05.html)

  - name:               "Install HammerDB"
    expect:
      command:          "{{ hammerdb_home }}/HammerDB-4.0-Linux-x64-installer.run"
      responses:
        "Press ":       ""
        "Do you accept this license":
                        "Y"
        "Continue":     "Y"
        "Installation Directory ":
                        "{{ hammerdb_loc }}"
        "Do you want to continue":
                        "Y"
        "View Readme file":
                        "n"
        "Run HammerDB ":
                        "n"
      creates:          "{{ hammerdb_loc }}"
    become:             yes
    become_user:        root

  # ------------------------------------------------------------------------------
  # Create the minimal installation directories needed to install Oracle Client.
  #
  # The ownership of these directories is set to oracle and its installation
  #   group. This is to be done ONLY ONCE as the root scripts change the
  #   persmissions later during software installation.
  # ------------------------------------------------------------------------------

  # ------------------- Create the directories needed for installation

  - name:               "Verifies existence of {{ oracle_base }}"
    stat:
      path:             "{{ oracle_base }}"
    register:           oracle_base_status

  - name:               "Create the directories needed for installation"
    file:
      path:             "{{ oracle_base }}"
      owner:            oracle
      group:            "{{ install_group }}"
      mode:             0775
      state:            directory
    become:             yes
    become_user:        root
    when:               not oracle_base_status.stat.exists

  # =============================================================================
  # Install Oracle Client 12.1.0.2 Software Only:
  # (1) Create response file for silent installation
  # (2) Install Oracle Client 12.1.0.2 Software Only in Silent Mode
  # (3) Run root scripts
  # =============================================================================

  - name:               "Set Facts for installation of Client Software"
    set_fact:
      response_file:    "{{ oracle_base }}/client_install.rsp"

  # ------------------- Create response file for silent installation

  - name:               "Create response file for silent installation"
    template:
      src:              "client_install.rsp.j2"
      dest:             "{{ response_file }}"
      mode:             0660
    vars:
      install_option:   "Administrator"
    become:             yes
    become_user:        oracle

  # ------------------- Install Oracle Client 12.1.0.2 Software Only in Silent Mode

  - name:               "Install Oracle Client 12.1.0.2 Software Only in Silent Mode"
    command:
      argv:
      -                 "{{ client_installer_loc }}/runInstaller"
      -                 "-silent"
      -                 "-noconfig"
      -                 "-responseFile"
      -                 "{{ response_file }}"
      -                 "-waitforcompletion"
      -                 "-ignorePrereq"
      chdir:            "{{ client_installer_loc }}"
      creates:          "{{ oracle_home }}/*"
    register:           client_sw_install_result
    become:             yes
    become_user:        oracle

  - name:               "output from Install Oracle Client 12.1.0.2 Software Only in Silent Mode"
    debug:
      var:              client_sw_install_result.stdout_lines
      verbosity:        0
    when:               client_sw_install_result.stdout_lines is defined

  # ------------------- Configure all tools
  #                     No response file is needed because no passwords need to
  #                     be set. See
  # https://docs.oracle.com/en/database/oracle/oracle-database/12.2/ladbi/running-postinstallation-configuration-using-a-password-response-file.html

  - name:               "Run configToolAllCommands after Oracle Client 12.1.0.2 Software Installation"
    command:
      argv:
      -                 /bin/sh
      -                 "{{ oracle_home }}/cfgtoollogs/configToolAllCommands"
    register:           configToolAllCommands
    when:
    -                   client_sw_install_result.stdout is defined
    -                   client_sw_install_result.stdout is search('/cfgtoollogs/configToolAllCommands')
    become:             yes
    become_user:        oracle

  - name:               "Output from configToolAllCommands script"
    debug:
      var:              configToolAllCommands.stdout_lines
      verbosity:        0
    when:               configToolAllCommands.stdout_lines is defined

  # ------------------------------------------------------------------------------
  # Creates and maintains the TNSNAMES file for data guard
  #
  # The variable 'tnsnames' must be defined
  # ------------------------------------------------------------------------------

  - name:               "Set path of TNSNAMES file"
    set_fact:
      tnsnames:         "{{ oracle_home }}/network/admin/tnsnames.ora"

  # ------------------- Add aliases for DEMO database

  - name:               "Add DEMO_DURAL alias to TNSNAMES file"
    lineinfile:
      create:           "yes"
      group:            "{{ install_group }}"
      mode:             0644
      owner:            "oracle"
      path:             "{{ tnsnames }}"
      regexp:           '^DEMO_DURAL\s*=\s*'
      line:             >
        DEMO_DURAL=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=dural.yaocm.id.au)
        (PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)
        (SERVICE_NAME=demo_dural.yaocm.id.au)))
      insertbefore:     EOF
    become:             yes
    become_user:        oracle

  # ------------------- Set Facts for verification of HammerDB Installation

  - name:               "Set Facts for verification of HammerDB Installation"
    set_fact:
      verify_script:    "{{ hammerdb_home }}/verify_client_libraries.sh"

  # ------------------- Create script for verification of HammerDB Installation

  - name:               "Create script for verification of HammerDB Installation"
    template:
      src:              "verify_client_libraries.sh.j2"
      dest:             "{{ verify_script }}"
      mode:             'u+rwx'
    become:             yes
    become_user:        hammer

  # ------------------- Verification of HammerDB Installation

  - name:               "Verification of HammerDB Installation"
    command:
      argv:
      -                 "{{ verify_script }}"
      chdir:            "{{ hammerdb_loc }}"
    register:           verify_script_result
    changed_when:       false
    become:             yes
    become_user:        hammer

  - name:               "Output from Verification of HammerDB Installation"
    debug:
      var:              verify_script_result.stdout_lines
      verbosity:        0
    when:               verify_script_result.stdout is defined

  - name:               "Ensures HammerDB is installed correctly"
    fail:
      msg:              "HammerDB is not installed correctly"
    when:
    -                   verify_script_result.stdout is defined
    -                   verify_script_result.stdout is not search('Success ... loaded library Oratcl for Oracle')
...
